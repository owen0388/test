import 'dart:io';
import 'config.dart';
import 'package:dio/dio.dart';
import 'package:flutter_openim_sdk/flutter_openim_sdk.dart';
import 'package:openim_demo/src/common/mytools.dart';
import 'package:openim_demo/src/common/urls.dart';
import 'package:openim_demo/src/models/login_certificate.dart';
import 'package:openim_demo/src/models/online_status.dart';
import 'package:openim_demo/src/models/upgrade_info.dart';
import 'package:openim_demo/src/res/strings.dart';
import 'package:openim_demo/src/utils/http_util.dart';
import 'package:openim_demo/src/utils/im_util.dart';
import 'package:openim_demo/src/widgets/im_widget.dart';
import '../utils/data_persistence.dart';
import '../models/publish_info.dart';
import '../models/community_info.dart';
import '../models/wode_info.dart';

class Apis {
  /// 定义变量
  static int get _platform =>
      Platform.isAndroid ? IMPlatform.android : IMPlatform.ios;
  static final openIMMemberIDS = [
    "13566665555",
    "13566665555",
    "13566665555",
    "13566665555"
  ];
  static final openIMGroupID = '082cad15fd27a2b6b875370e053ccd79';

  /// login登录
  static Future<LoginCertificate> login({
    String? areaCode,
    String? phoneNumber,
    String? email,
    required String password,
  }) async {
    try {
      var data = await HttpUtil.post(Urls.login, data: {
        "areaCode": areaCode,
        'phoneNumber': phoneNumber,
        'email': email,
        'password': IMUtil.generateMD5(password),
        'platform': _platform,
        'operationID': _getOperationID(),
      });
      return LoginCertificate.fromJson(data);
    } catch (e) {
      print('e:$e');
      // var error = e as DioError;
      // IMWidget.showToast('登录失败，请联系管理员:${error.response}');
      return Future.error(e);
    }
  }

  static Future<LoginCertificate> login2(String uid) async {
    try {
      var data = await HttpUtil.post(Urls.login2, data: {
        'secret': Config.secret,
        'platform': _platform,
        'userID': uid,
        'operationID': _getOperationID(),
      });
      return LoginCertificate.fromJson(data);
    } catch (e) {
      print('e:$e');
      // var error = e as DioError;
      // IMWidget.showToast('登录失败，请联系管理员:${error.response}');
      return Future.error(e);
    }
  }

  /// register
  static Future<LoginCertificate> register({
    String? areaCode,
    String? phoneNumber,
    String? email,
    required String password,
    required String verificationCode,
  }) async {
    try {
      var data = await HttpUtil.post(Urls.register, data: {
        "areaCode": areaCode,
        'phoneNumber': phoneNumber,
        'email': email,
        'password': IMUtil.generateMD5(password),
        'verificationCode': verificationCode,
        'platform': Platform.isAndroid ? IMPlatform.android : IMPlatform.ios,
        'operationID': _getOperationID(),
      });
      return LoginCertificate.fromJson(data);
    } catch (e) {
      print('e:$e');
      // var error = e as DioError;
      // IMWidget.showToast('注册失败，请联系管理员:${error.response}');
      return Future.error(e);
    }
  }

  static Future<bool> register2(
      {required String uid, required String name}) async {
    try {
      await HttpUtil.post(Urls.register2, data: {
        'secret': Config.secret,
        'platform': _platform,
        'uid': uid,
        'name': name,
        'operationID': _getOperationID(),
      });
      return true;
    } catch (e) {
      print('e:$e');
      // var error = e as DioError;
      // IMWidget.showToast('注册失败，请联系管理员:${error.response}');
      return false;
    }
  }

  /// 获取验证码
  static Future<bool> requestVerificationCode({
    String? areaCode,
    String? phoneNumber,
    String? email,
  }) async {
    return HttpUtil.post(
      Urls.getVerificationCode,
      data: {
        "areaCode": areaCode,
        "phoneNumber": phoneNumber,
        "email": email,
        'operationID': _getOperationID(),
      },
    ).then((value) {
      IMWidget.showToast(StrRes.sentSuccessfully);
      return true;
    }).catchError((e) {
      print('e:$e');
      // var error = e as DioError;
      // IMWidget.showToast('发送失败:${error.response}');
      return false;
    });
  }

  /// 校验验证码
  static Future<dynamic> checkVerificationCode({
    String? areaCode,
    String? phoneNumber,
    String? email,
    required String verificationCode,
  }) {
    return HttpUtil.post(
      Urls.checkVerificationCode,
      data: {
        "phoneNumber": phoneNumber,
        "areaCode": areaCode,
        "email": email,
        "verificationCode": verificationCode,
        'operationID': _getOperationID(),
      },
    );
  }

  /////////////////////////////////////////////////////////
  /// 为用户导入好友OpenIM成员
  static Future<bool> importFriends(
      {required String uid, required String token}) async {
    try {
      await HttpUtil.post(
        Urls.importFriends,
        data: {
          "uidList": openIMMemberIDS,
          "ownerUid": uid,
          'operationID': _getOperationID(),
        },
        options: Options(headers: {'token': token}),
      );
      return true;
    } catch (e) {
      print('e:$e');
    }
    return false;
  }

  /// 拉用户进OpenIM官方体验群
  static Future<bool> inviteToGroup(
      {required String uid, required String token}) async {
    try {
      await dio.post(
        Urls.inviteToGroup,
        data: {
          "groupID": openIMGroupID,
          "uidList": [uid],
          "reason": "Welcome join openim group",
          'operationID': _getOperationID(),
        },
        options: Options(headers: {'token': token}),
      );
      return true;
    } catch (e) {
      print('e:$e');
    }
    return false;
  }

  static Future<UpgradeInfoV2> checkUpgradeV2() {
    return dio.post<Map<String, dynamic>>(
      'https://www.pgyer.com/apiv2/app/check',
      options: Options(
        contentType: 'application/x-www-form-urlencoded',
      ),
      data: {
        '_api_key': 'a8d237955358a873cb9472d6df198490',
        'appKey': 'ae0f3138d2c3ca660039945ffd70adb6',
      },
    ).then((resp) {
      Map<String, dynamic> map = resp.data!;
      if (map['code'] == 0) {
        return UpgradeInfoV2.fromJson(map['data']);
      }
      return Future.error(map);
    });
  }

  static Future<List<OnlineStatus>> _onlineStatus(
      {required List<String> uidList}) {
    return dio.post<Map<String, dynamic>>(Urls.onlineStatus, data: {
      'operationID': _getOperationID(),
      "secret": Config.secret,
      "userIDList": uidList
    }).then((resp) {
      Map<String, dynamic> map = resp.data!;
      if (map['errCode'] == 0) {
        return (map['successResult'] as List)
            .map((e) => OnlineStatus.fromJson(e))
            .toList();
      }
      return Future.error(map);
    });
  }

  /// 每次最多查询200条
  static void queryOnlineStatus({
    required List<String> uidList,
    Function(Map<String, String>)? onlineStatusDescCallback,
    Function(Map<String, bool>)? onlineStatusCallback,
  }) {
    // if (uidList.isEmpty) return;
    // var batch = uidList.length ~/ 200;
    // var remainder = uidList.length % 200;
    // var i = 0;
    // var subList;
    // if (batch > 0) {
    //   for (; i < batch; i++) {
    //     subList = uidList.sublist(i * 200, 200 * (i + 1));
    //     Apis._onlineStatus(uidList: subList).then((list) => _handleStatus(
    //           list,
    //           onlineStatusCallback: onlineStatusCallback,
    //           onlineStatusDescCallback: onlineStatusDescCallback,
    //         ));
    //   }
    // }
    // if (remainder > 0) {
    //   if (i > 0) {
    //     subList = uidList.sublist(i * 200, 200 * i + remainder);
    //     Apis._onlineStatus(uidList: subList).then((list) => _handleStatus(
    //           list,
    //           onlineStatusCallback: onlineStatusCallback,
    //           onlineStatusDescCallback: onlineStatusDescCallback,
    //         ));
    //   } else {
    //     subList = uidList.sublist(0, remainder);
    //     Apis._onlineStatus(uidList: subList).then((list) => _handleStatus(
    //           list,
    //           onlineStatusCallback: onlineStatusCallback,
    //           onlineStatusDescCallback: onlineStatusDescCallback,
    //         ));
    //   }
    // }
  }

  static _handleStatus(
    List<OnlineStatus> list, {
    Function(Map<String, String>)? onlineStatusDescCallback,
    Function(Map<String, bool>)? onlineStatusCallback,
  }) {
    final statusDesc = <String, String>{};
    final status = <String, bool>{};
    list.forEach((e) {
      if (e.status == 'online') {
        // IOSPlatformStr     = "IOS"
        // AndroidPlatformStr = "Android"
        // WindowsPlatformStr = "Windows"
        // OSXPlatformStr     = "OSX"
        // WebPlatformStr     = "Web"
        // MiniWebPlatformStr = "MiniWeb"
        // LinuxPlatformStr   = "Linux"
        final pList = <String>[];
        for (var platform in e.detailPlatformStatus!) {
          if (platform.platform == "Android" || platform.platform == "IOS") {
            pList.add(StrRes.phoneOnline);
          } else if (platform.platform == "Windows") {
            pList.add(StrRes.pcOnline);
          } else if (platform.platform == "Web") {
            pList.add(StrRes.webOnline);
          } else if (platform.platform == "MiniWeb") {
            pList.add(StrRes.webMiniOnline);
          } else {
            statusDesc[e.userID!] = StrRes.online;
          }
        }
        statusDesc[e.userID!] = '${pList.join('/')}${StrRes.online}';
        status[e.userID!] = true;
      } else {
        statusDesc[e.userID!] = StrRes.offline;
        status[e.userID!] = false;
      }
    });
    onlineStatusDescCallback?.call(statusDesc);
    onlineStatusCallback?.call(status);
  }

  static String _getOperationID() {
    return DateTime.now().millisecondsSinceEpoch.toString();
  }

  /// ------------------------------------------------------------///
  /// -----------------------新街口，分割线-------------------------///
  /// ------------------------------------------------------------///
  /// 获取朋友圈列表
  static Future<communityInfo> getWechatMomentsList(
      {String? uid, String? token, int? pagesNum}) async {
    try {
      var res = await dio.post(
        "http://${Config.defaultIp}:10002/office/get_user_friend_work_moments",
        data: {
          'operationID': _getOperationID(),
          "pageNumber": pagesNum,
          "showNumber": 10,
        },
        options: Options(headers: {'token': token}),
      );
      print("wwwwwwwwwwwwww");
      Map<String, dynamic> map = res.data!;
      // print(map["data"]["workMoments"][0]["workMomentID"]);
      print("wwwwwwwwwwwwww");
      return communityInfo.fromJson(res.data);
    } catch (e) {
      print('getWechatMomentsList e:$e');
      return Future.error(e);
    }
  }

  /// 发布一条朋友圈
  static Future<WechatMomentsInfo> PublistOneWeChatMoments(
      {String? uid,
      String? myName,
      String? faceUrl,
      String? content,
      String? token}) async {
    try {
      var res = await dio.post(
        "http://${Config.defaultIp}:10002/office/create_one_work_moment",
        data: {
          'operationID': _getOperationID(),
          "workMoment": {
            "atUserList": [],
            "comments": [],
            "content": content,
            "createTime": getTimeStamp(),
            "faceURL": faceUrl,
            "likeUserList": [],
            "permission": 0,
            "permissionGroupList": [],
            "permissionUserList": [],
            "userID": uid,
            "userName": myName,
            "workMomentID": "0"
          },
        },
        options: Options(headers: {'token': token}),
      );
      // print(res.data);
      return WechatMomentsInfo.fromJson(res.data);
    } catch (e) {
      print('PublistOneWeChatMoments e:$e');
      return Future.error(e);
    }
  }

  /// 通过朋友圈ID，获取这个ID的朋友圈数据
  static Future<Map<String, dynamic>> get_Date_By_MomentsID_req(
      {String? workMomentID, String? token}) async {
    try {
      var res = await dio.post(
        "http://${Config.defaultIp}:10002/office/get_work_moment_by_id",
        data: {
          'operationID': _getOperationID(),
          "workMomentID": workMomentID,
        },
        options: Options(headers: {'token': token}),
      );
      print("获取这个ID的朋友圈数据1");
      Map<String, dynamic> map = res.data!;
      print("获取这个ID的朋友圈数据2");
      return map;
    } catch (e) {
      print('getWechatMomentsDateByMomentsID e:$e');
      return Future.error(e);
    }
  }

  /// minio 头像上传---单张图片
  static Future<Response> uploadOenImage({required String path}) async {
    var TempObj;
    //判断是否为空
    if (path.isEmpty == false) {
      String url = "${Config.imApiUrl()}/third/minio_upload";

      var formData = FormData.fromMap({
        "file": await MultipartFile.fromFile(path),
        'operationID': '${getTimeStamp()}',
        'fileType': 102
      });

      var obj = await dio.post(
        url,
        data: formData,
        options: Options(
            headers: {'token': DataPersistence.getLoginCertificate()?.token}),
      );
      return obj;
    }

    return TempObj;
  }

  /// minio 头像上传---多张图片【注意：暂时先不用，可能服务端没有处理，优先用单张上传】
  static Future<Response> uploadMoreImage({required List<File> path}) async {
    //网络地址
    String url = "${Config.imApiUrl()}/third/minio_upload";

    //将多文件通过路径 进行文件数据处理
    List<MultipartFile> myFromFile = [];
    for (var i = 1; i < path.length; i++) {
      myFromFile.add(await MultipartFile.fromFile(path[i].path));
    }

    //组织数据
    var formData = FormData.fromMap({
      "files": myFromFile,
      'operationID': '${getTimeStamp()}', //时间戳
      'fileType': 102
    });

    //发送请求
    var obj = await dio.post(
      url,
      data: formData,
      options: Options(
          headers: {'token': DataPersistence.getLoginCertificate()?.token}),
    );

    return obj;
  }

  /// 获取评论列表
  // static Future<WechatMomentsInfo> get_CommentListDate_req(
  //     {String? content, String? operationID,String? replyUserID,String? workMomentID, String? token}) async {
  //   try {
  //     var res = await dio.post(
  //       "http://${Config.defaultIp}:10002/office/comment_one_work_moment",
  //       data: {
  //         'content': "aaaaa",
  //         "operationID": _getOperationID(),
  //         "replyUserID": replyUserID,
  //         "workMomentID": workMomentID,
  //       },
  //       options: Options(headers: {'token': token}),
  //     );
  //     print(res.data);
  //     return WechatMomentsInfo.fromJson(res.data);
  //   } catch (e) {
  //     print('PublistOneWeChatMoments e:$e');
  //     return Future.error(e);
  //   }
  // }

  /// 发表一个评论
  static Future<WechatMomentsInfo> publist_OneComment_req(
      {String? content,
      String? operationID,
      String? replyUserID,
      String? workMomentID,
      String? token}) async {
    try {
      var res = await dio.post(
        "http://${Config.defaultIp}:10002/office/comment_one_work_moment",
        data: {
          'content': content,
          "operationID": _getOperationID(),
          "replyUserID": replyUserID,
          "workMomentID": workMomentID,
        },
        options: Options(headers: {'token': token}),
      );
      // print(res.data);
      return WechatMomentsInfo.fromJson(res.data);
    } catch (e) {
      print('publist_OneComment_req e:$e');
      return Future.error(e);
    }
  }

  /// 点赞一条评论
  static Future<bool> praise_OneComment_req(
      {String? content,
      String? operationID,
      String? replyUserID,
      String? workMomentID,
      String? token}) async {
    try {
      var res = await dio.post(
        "http://${Config.defaultIp}:10002/office/like_one_work_moment",
        data: {
          'content': content,
          "operationID": _getOperationID(),
          "replyUserID": replyUserID,
          "workMomentID": workMomentID,
        },
        options: Options(headers: {'token': token}),
      );
      // print(res.data);
      return true;
    } catch (e) {
      print('praise_OneComment_req e:$e');
      return Future.error(e);
    }
  }

  /// 通过用户ID,获取这个用户的朋友圈数据
  static Future<woDeInfo> get_Date_By_UserID_req(
      {String? userID, int? pagesNum, String? token}) async {
    try {
      var res = await dio.post(
        "http://${Config.defaultIp}:10002/office/get_user_work_moments",
        data: {
          "operationID": _getOperationID(),
          "pageNumber": pagesNum,
          "showNumber": 20,
          "userID": userID.toString()
        },
        options: Options(headers: {'token': token}),
      );
      print("用户ID朋友圈数据1");
      Map<String, dynamic> map = res.data!;
      // print(map["data"]);
      print("用户ID朋友圈数据2");
      return woDeInfo.fromJson(res.data);
    } catch (e) {
      print('get_Date_By_UserID_req e:$e');
      return Future.error(e);
    }
  }

  // /// 关注一个用户
  // static Future<bool> care_OneComment_req({String? operationID,String? careUserID,String? token}) async {
  //   try {
  //     var res = await dio.post(
  //       "http://${Config.defaultIp}:10002/office/like_one_work_moment",
  //       data: {
  //         "operationID": _getOperationID(),
  //         "replyUserID": careUserID,
  //       },
  //       options: Options(headers: {'token': token}),
  //     );
  //     // print(res.data);
  //     return true;
  //   } catch (e) {
  //     print('care_OneComment_req e:$e');
  //     return Future.error(e);
  //   }
  // }

//----------------------------------------------------------------//
//-----------------------------社区接口---------------------------//
//----------------------------------------------------------------//

  //创建房间
  static Future<Map<String, dynamic>> get_shequ_createrooms_req(
      {String? userID}) async {
    try {
      var res = await dio.post(
        "http://${Config.defaultIp}:8080/createRooms",
        data: {
          "operationID": _getOperationID(),
          "userID": userID,
          "title": "测试1",
          "describle": "测试2",
          "IsPrivate": 1, //是否需房间密码 1需要面 2不需房间密码
        },
        options: Options(
            headers: {'token': DataPersistence.getLoginCertificate()?.token}),
      );

      Map<String, dynamic> map = res.data!;
      // print("创建房间");
      // print(map);
      return map;
    } catch (e) {
      print('创建房间 e:$e');
      return Future.error(e);
    }
  }

  //获取所有的房间
  static Future<Map<String, dynamic>> get_shequ_allrooms_req(
      {int? pageNumber}) async {
    try {
      var res = await dio.post(
        "http://${Config.defaultIp}:8080/getAllrooms",
        data: {
          "operationID": _getOperationID(),
          "pageNumber": pageNumber,
          "showNumber": 10,
        },
        options: Options(
            headers: {'token': DataPersistence.getLoginCertificate()?.token}),
      );

      Map<String, dynamic> map = res.data!;
      // print("获取所有的房间");
      // print(map);
      return map;
    } catch (e) {
      print('获取所有的房间 e:$e');
      return Future.error(e);
    }
  }
}
